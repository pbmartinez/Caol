@using Application.Dtos
@inject HttpClient Http
@inject IStringLocalizer<Resource> Localizer


<h3>PieChart</h3>

<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Pie" 
                InputData="@Data" @bind-SelectedIndex="Index" 
                InputLabels="@Labels" 
                Width="300px" 
                Height="300px" />
</MudPaper>
@*<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton @onclick="RandomizeData" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>  
</MudPaper>*@
@code {
    [Parameter] public AporteRecetaLiquidaDto Aporte { get; set; } = null!;
    [Parameter] public DateTime StartDate { get; set; }
    [Parameter] public DateTime EndDate { get; set; }
    double[] Data { get; set; } = new double[1];
    string[] Labels { get; set; } = new string[1];

    protected override async Task OnInitializedAsync()
    {
        await UpdateChartAsync();
    }
    public async Task UpdateChartAsync()
    {
        var link = $"pizza?startDate={StartDate}&endDate={EndDate}&coUsuarios={string.Join(',', Aporte.Valores.Select(a => a.Name))}";
        Aporte = await Http.GetFromJsonAsync<AporteRecetaLiquidaDto>(link) ?? new AporteRecetaLiquidaDto();

        Data = new double[Aporte.Valores.Count];
        Labels = new string[Aporte.Valores.Count];
        var i = 0;
        Aporte.Valores.ForEach(a =>
        {
            Data[i] = a.RecetaLiquida;
            Labels[i] = $"{a.Name}, {a.Porciento}";
        });
    }

    private int Index = 0; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
}
