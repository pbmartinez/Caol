@page "/comercial-performance"
@using Application.Dtos
@using BlazorApp.Shared.Components

@inject HttpClient Http
@inject IStringLocalizer<Resource> Localizer
@inject ISnackbar Snackbar


<MudDatePicker Label="Inicio" @bind-Date="StartDate" FixDay=1 />

<MudDatePicker Label="Fin" @bind-Date="EndDate" FixDay=1/>


@if(Usuarios != null && Usuarios.Count > 0)
{
    <MudSelect T="string" 
               Label="Vendedor" 
               MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options"
               Clearable="true"
               SelectAll="true"
               Placeholder="Select vendor ..."
               Dense="true"
               >
    @foreach (var item in Usuarios)
    {
        <MudSelectItem T="string" Value="@item.CoUsuario">@item.NoUsuario</MudSelectItem>
    }
    </MudSelect>

}

<MudButton OnClick="ShowPizzaAsync" > Show Pizza </MudButton>
<MudButton OnClick="ShowGraphicAsync"> Show Graphic </MudButton>
<MudButton OnClick="ShowRelatorioAsync"> Show Relatorio </MudButton>

@if (Aporte != null && Aporte.Valores != null && Aporte.Valores.Count != 0)
{
    <PieChart Aporte=Aporte></PieChart>
}
@if (UserPerformance!=null && UserPerformance.UsuarioRecetas != null && UserPerformance.UsuarioRecetas.Count != 0)
{    
    <GraphicChart UsuarioPerformance=UserPerformance></GraphicChart>
}
@if (UsuariosRelatorio != null && UsuariosRelatorio.Count > 0)
{
    <RelatorioTable Usuarios=UsuariosRelatorio></RelatorioTable>
}

@code {
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>();
    DateTime? StartDate;
    DateTime? EndDate;
    List<CaoUsuarioDto> Usuarios = new List<CaoUsuarioDto> ();
    AporteRecetaLiquidaDto? Aporte = null;
    AporteMensualDto? UserPerformance = null;
    List<UsuarioDto> UsuariosRelatorio = new List<UsuarioDto>();

    protected override async Task OnInitializedAsync()
    {
        StartDate = DateTime.Today.AddDays(-DateTime.Today.Day+1);
        EndDate = DateTime.Today.AddDays(-DateTime.Today.Day+1).AddMonths(1);
        var us = await Http.GetFromJsonAsync<List<CaoUsuarioDto>>("api/usuarios");
        Usuarios = us ?? new List<CaoUsuarioDto>();
    }

    private string ForApiEndPoint(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }
        return $"{date?.Year}-{date?.Month}-{date?.Day}";
    }
    private async Task ShowPizzaAsync()
    {
        var link = $"api/facturas/pizza?startDate={ForApiEndPoint(StartDate)}&endDate={ForApiEndPoint(EndDate)}&coUsuarios={string.Join(',', options)}";
        var distroAporte = await Http.GetFromJsonAsync<AporteRecetaLiquidaDto>(link);
        if (distroAporte == null || distroAporte.Total == 0 || distroAporte.Valores.Count == 0)
        {
            Snackbar.Add("No results", Severity.Info);
        }
        else
            Aporte = distroAporte;
    }
    private async Task ShowGraphicAsync()
    {
        //var link = $"api/facturas/graphic?startDate={ForApiEndPoint(StartDate)}&endDate={ForApiEndPoint(EndDate)}&coUsuarios={string.Join(',', options)}";
        var link = $"api/facturas/graphic?startDate=2007-01-01&endDate=2007-12-01&coUsuarios=carlos.carvalho,carlos.arruda,anapaula.chiodaro";
        var aporteMensualDto = await Http.GetFromJsonAsync<AporteMensualDto>(link);
        if (aporteMensualDto == null || aporteMensualDto.UsuarioRecetas.Count == 0 || aporteMensualDto.UsuarioRecetas.Count == 0)
        {
            Snackbar.Add("No results", Severity.Info);
        }
        else
            UserPerformance = aporteMensualDto;
    }
    private async Task ShowRelatorioAsync()
    {
        //var link = $"api/facturas/relatorio?startDate={ForApiEndPoint(StartDate)}&endDate={ForApiEndPoint(EndDate)}&coUsuarios={string.Join(',', options)}";
        var link = $"api/facturas/relatorio?startDate=2007-01-01&endDate=2007-12-01&coUsuarios=carlos.carvalho,carlos.arruda,anapaula.chiodaro";
        var listaUsuarios = await Http.GetFromJsonAsync<List<UsuarioDto>>(link);
        if (listaUsuarios == null || listaUsuarios.Count == 0)
        {
            Snackbar.Add("No results", Severity.Info);
        }
        else
            UsuariosRelatorio = listaUsuarios;
    }

}

