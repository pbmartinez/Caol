@page "/comercial-performance"
@using Application.Dtos
@using BlazorApp.Services
@using Domain.DataAnnotations
@using BlazorApp.Shared.Components
@using BlazorApp.Models
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

@inject HttpClient Http
@inject IStringLocalizer<Resource> Localizer
@inject ISnackbar Snackbar
@inject HttpClientInterceptorService Interceptor 

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="@Localizer[Resource.FilterOptionsStartDate]" @bind-Date="filterOptions.StartDate" FixDay=1 Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]" 
                                       Validation="@(new Func<DateTime?, IEnumerable<string>>(CheckStartDate))" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="@Localizer[Resource.FilterOptionsEndDate]" @bind-Date="filterOptions.EndDate" FixDay=1 Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]"
                                       Validation="@(new Func<DateTime?, IEnumerable<string>>(CheckEndDate))" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4">
                        @if (Usuarios != null && Usuarios.Count > 0)
                        {
                            <MudSelect T="string"
                                   Label="@Localizer[Resource.FilterOptionsSelectedValues]"
                                   MultiSelection="true" @bind-Value="filterOptions.SelectedValues" @bind-SelectedValues="options"
                                   Clearable="true"
                                   SelectAll="true"
                                   Placeholder="@Localizer[Resource.display_SeleccioneXXX]"
                                   Dense="true"
                                   Required="true"
                                   RequiredError="@Localizer[Resource.validation_EmptyVendorSelection]">
                                @foreach (var item in Usuarios)
                                {
                                    <MudSelectItem T="string" Value="@item.CoUsuario">@item.NoUsuario</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudSelect T="string"></MudSelect>
                        }
                    </MudItem>
                </MudGrid>

                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" OnClick="ShowPizzaAsync" Class="ml-auto"
                               StartIcon="@Icons.Material.Filled.PieChart"> @Localizer[Resource.btn_ShowPizza] </MudButton>
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" OnClick="ShowGraphicAsync" Class="ml-auto"
                               StartIcon="@Icons.Material.Filled.BarChart"> @Localizer[Resource.btn_ShowGraphic] </MudButton>
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" OnClick="ShowRelatorioAsync" Class="ml-auto"
                               StartIcon="@Icons.Material.Filled.TableRows"> @Localizer[Resource.btn_ShowRelatorio] </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>




<MudGrid>
    @if (showLoadingPizza)
    {
        <MudItem xs="12" md="6">
            <MudProgressCircular Color="MudBlazor.Color.Primary" Size="Size.Medium" Indeterminate="true" />
        </MudItem>
    }
    @if (Aporte != null && Aporte.Valores != null && Aporte.Valores.Count != 0)
    {
        <MudItem xs="12" md="6">
            <PieChart Aporte=Aporte></PieChart>
        </MudItem>
    }
    @if (showLoadingGraphic)
    {
        <MudItem xs="12" md="6">
            <MudProgressCircular Color="MudBlazor.Color.Primary" Size="Size.Medium" Indeterminate="true" />
        </MudItem>
    }
    @if (UsuariosGraphico != null && UsuariosGraphico.Count != 0)
    {
        <MudItem xs="12" md="6">
            <GraphicChart UsuariosGraphico=UsuariosGraphico></GraphicChart>
        </MudItem>
    }
    @if (showLoadingRelatorio)
    {
        <MudItem xs="12" md="6">
            <MudProgressCircular Color="MudBlazor.Color.Primary" Size="Size.Medium" Indeterminate="true" />
        </MudItem>
    }
    @if (UsuariosRelatorio != null && UsuariosRelatorio.Count > 0)
    {
        <MudItem xs="12">
            <RelatorioTable Usuarios=UsuariosRelatorio></RelatorioTable>
        </MudItem>
    }
</MudGrid>

@implements IDisposable

@code {

    bool success;
    bool showLoadingPizza = false;
    bool showLoadingGraphic = false;
    bool showLoadingRelatorio = false;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    FilterOptions filterOptions;
    List<CaoUsuarioDto> Usuarios = new List<CaoUsuarioDto>();
    AporteRecetaLiquidaDto? Aporte = null;
    List<UsuarioDto> UsuariosRelatorio = new List<UsuarioDto>();
    List<UsuarioDto> UsuariosGraphico = new List<UsuarioDto>();

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();

        var startDate = DateTime.Today.AddDays(-DateTime.Today.Day + 1);
        var endDate = DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(1);
        filterOptions = new FilterOptions
            {
                StartDate = startDate,
                EndDate = endDate,
                SelectedValues = string.Empty
            };
        var us = await Http.GetFromJsonAsync<List<CaoUsuarioDto>>("api/usuarios");
        Usuarios = us ?? new List<CaoUsuarioDto>();
    }

    private string ForApiEndPoint(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }
        return $"{date?.Year}-{date?.Month}-{date?.Day}";
    }
    private async Task ShowPizzaAsync()
    {
        Aporte = null;
        showLoadingPizza = true;
        var link = $"api/facturas/pizza?startDate={ForApiEndPoint(filterOptions.StartDate)}&endDate={ForApiEndPoint(filterOptions.EndDate)}&coUsuarios={string.Join(',', options)}";
        Aporte = await Http.GetFromJsonAsync<AporteRecetaLiquidaDto>(link);
        if (Aporte == null || Aporte.Total == 0 || Aporte.Valores.Count == 0)
            Snackbar.Add(Localizer[Resource.display_NoResults], Severity.Info);
        showLoadingPizza = false;
    }
    private async Task ShowGraphicAsync()
    {
        UsuariosGraphico = null;
        showLoadingGraphic = true;
        var link = $"api/facturas/graphic?startDate={ForApiEndPoint(filterOptions.StartDate)}&endDate={ForApiEndPoint(filterOptions.EndDate)}&coUsuarios={string.Join(',', options)}";
        UsuariosGraphico = (await Http.GetFromJsonAsync<List<UsuarioDto>>(link)) ?? new List<UsuarioDto>();
        if (UsuariosGraphico == null || UsuariosGraphico.Count == 0)
            Snackbar.Add(Localizer[Resource.display_NoResults], Severity.Info);
        showLoadingGraphic = false;
    }
    private async Task ShowRelatorioAsync()
    {
        UsuariosRelatorio = null;
        showLoadingRelatorio = true;
        var link = $"api/facturas/relatorio?startDate={ForApiEndPoint(filterOptions.StartDate)}&endDate={ForApiEndPoint(filterOptions.EndDate)}&coUsuarios={string.Join(',', options)}";
        UsuariosRelatorio = (await Http.GetFromJsonAsync<List<UsuarioDto>>(link)) ?? new List<UsuarioDto>();
        if (UsuariosRelatorio == null || UsuariosRelatorio.Count == 0)
            Snackbar.Add(Localizer[Resource.display_NoResults], Severity.Info);
        showLoadingRelatorio = false;
    }
    private List<string> CheckStartDate(DateTime? startDate)
    {
        var listOfErrors = new List<string>();
        if (startDate?.Date >= filterOptions.EndDate?.Date)
            listOfErrors.Add(Localizer[Resource.validation_OnDateComparison]);
        return listOfErrors;
    }
    private List<string> CheckEndDate(DateTime? endDate)
    {
        var listOfErrors = new List<string>();
        if (endDate?.Date <= filterOptions.StartDate?.Date)
            listOfErrors.Add(Localizer[Resource.validation_OnDateComparison]);
        return listOfErrors;
    }

    public void Dispose() => Interceptor.DisposeEvent();
}

